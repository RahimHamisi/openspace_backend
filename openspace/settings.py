"""
Django settings for openspace project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-az!-qw*3r32ng7r7hs*wphv5k^8)9eaju6bf3m32f*m1gq0arz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'myapprest',
    #third party apps
    "rest_framework",
    "graphene_django",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_celery_beat"
]

SITE_ID = 1

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'openspace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openspace.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# GRAPHENE = {
#     'SCHEMA': 'myapp.schema.schema',
#     'GRAPHIQL': True,
#     'MIDDLEWARE': [
#         'graphql_jwt.middleware.JSONWebTokenMiddleware',
#     ],
# }

GRAPHENE = {
    'SCHEMA': 'myapp.schema.schema',
    'GRAPHIQL': True,
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}



import datetime

GRAPHENE_JWT = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=10),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_VERIFY_EXPIRATION': True,  # Enforce token expiration checks
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
}


AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",  # JWT backend
    "django.contrib.auth.backends.ModelBackend",  # Default backend
]


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
}


CORS_ALLOW_ALL_ORIGINS = True

# CORS_ORIGIN_WHITELIST = [
#     'http://localhost:4200',
# ]


# for speficic  origin
CORS_ALLOWED_ORIGINS = [
    "http://localhost:4200",  # Angular frontend (default port)
    "http://127.0.0.1:8000",  # API itself
    "http://10.0.2.2:8000",  # Flutter emulator (Android)
    "http://localhost:5000",
    "http://127.0.0.1:42217",
    "https://cece-196-249-96-235.ngrok-free.app",
    "http://127.0.0.1:8001"
]

CORS_ALLOW_CREDENTIALS = True


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'limbureubenn@gmail.com'
EMAIL_HOST_PASSWORD = 'stlamceqmzjmbvxs'
DEFAULT_FROM_EMAIL = 'limbureubenn@gmail.com'
FRONTEND_URL = 'http://localhost:4200'
BACKEND_URL = 'http://127.0.0.1:8000'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800

FERNET_KEY="1r5qIiRHx6Jwjl1wXDxFIppfQbMCGhlW1ScTc7tmSYs="

# my API key for sending an sms
# atsk_ea83bd5ab23b2e68e1721ec3fd1ec4b491b52ea800a3a94ed0364e367b8d6e77aabd0916


# Set environment variables directly in settings.py
os.environ["AT_USERNAME"] = "sandbox"
os.environ["AT_API_KEY"] = "atsk_ce5403b17335ff50b7e5d3b5a10469710fc73853a932daf7523692084de1911d196e23f3"
os.environ["FERNET_KEY"] = "1r5qIiRHx6Jwjl1wXDxFIppfQbMCGhlW1ScTc7tmSYs="

# ZTc3NGYxOTY3ODhjMmRlMWExNWZiMmIyOWY0OTIzNDVhODdhMGVmNThlYWY0ZDdlMDcwMzQxNzExMDI4MTY5Ng==


AUTH_USER_MODEL = 'myapprest.CustomUser'



from dotenv import load_dotenv # type: ignore

load_dotenv()

# Now fetch the keys from the environment
BEEM_API_KEY = os.getenv("BEEM_API_KEY")
BEEM_SECRET_KEY = os.getenv("BEEM_SECRET_KEY")
BEEM_SENDER_ID = os.getenv("BEEM_SENDER_ID")
FERNET_KEY = os.getenv("FERNET_KEY")

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    'check-expired-bookings-daily': {
        'task': 'myapprest.notification_task.check_expired_bookings_task',
        'schedule': crontab(hour=0, minute=0),  # every midnight
    },
}
